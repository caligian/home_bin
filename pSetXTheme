#!/usr/bin/python3

import argparse
import sys
import os
import glob
import subprocess

xresourcesPath = os.environ['HOME'] + "/.Xresources"
themeFolderPath = os.environ['HOME'] + '/XresourcesThemes'
themes = glob.glob(f"{themeFolderPath}/*X")
currentThemePath = f"{os.environ['HOME']}/currentXresourcesTheme.X"

class t_validPath(str):
    def __init__(self, path):
        if not os.path.exists(path):
            print('Invalid path specified.')
            sys.exit(1)

def SetTheme(themeString, themeName=""):
    contents = []
    new = ""
    with open(xresourcesPath) as f:
        contents = f.readlines()
        
    stopidx = 0
    for i in contents:
        if '! special' in i:
            break
        else:
            stopidx += 1
            

    new = ("").join(contents[:stopidx])
    new = new + themeString


    with open(xresourcesPath, 'w') as f:
        f.write(new)

    if themeName != "":
        with open(currentThemePath, 'w') as f:
            f.write(themeName + "\n")

    subprocess.check_output(f'xrdb {xresourcesPath}'.split())

parser = argparse.ArgumentParser('Insert a new colorscheme inside Xresources')
parser.add_argument('-p', required=False, metavar='THEME PATH', type=str, help='Path to the file where the theme is stored. If -n NAME is not provided then basename will be the themename.')
parser.add_argument('-i', required=False, action='store_true', help='Use the string passed to it by stdin')
parser.add_argument('-s', required=False, help='Show all the available themes. All the themes are stored in $HOME/XresourcesThemes with the extension .X', action='store_true')
parser.add_argument('-n', required=False, help='Name of the theme. This is to be used with -i (mandatory) or -p (optional). ', type=str, metavar="NAME OF THE THEME")
parser.add_argument('-x', required=False, help='Select a theme from the given list of themes by entering an integer value.', action='store_true')

args = parser.parse_args()

themename = ""

if args.n:
    themename = args.n

if args.p:
    t_validPath(args.p)
    with open(args.p) as f:
        string = f.read()
        themename = args.p.split('.')[0]
        print('Using theme:', themename.split('/')[-1])
        SetTheme(string, themename)
elif args.i:
    if not themename:
        print('No theme has been provided.')
        sys.exit(1)
    lines = ""
    for i in list(sys.stdin):
        lines += i
    print(f"Writing theme to {themeFolderPath}/{args.n}.X")
    with open(f"{themeFolderPath}/{args.n}.X", 'w') as f:
        f.write(lines + "\n")
    SetTheme(lines, args.n)
elif args.s:
      for idx,i in enumerate(themes):
        print(f"{idx}> {i}")
elif args.x:
    l = len(themes)
    while 1 > 0:
        for idx,i in enumerate(themes):
            themename = i.split('.')[0].split('/')[-1]
            print(idx," ", themename)
        i = input("% ")
        try:
            i = int(i)
            if i < 0 and i >= l:
                print('Invalid index provided.')
            else:
                choice = themes[i]
                with open(choice) as f:
                    content = f.read()
                    SetTheme(content, themename)
                    break
                    
        except:
            print('That\'s not an integer.')
            continue



