#!/usr/bin/env python3
import argparse
import re
import os
import subprocess


def inject(bg, fg, alt_bg, alt_fg):
    f = f"{os.environ['HOME']}/.current_rofi_theme.rasi"
    read_from, write_to = f,f
    assocs = {
        "selected-normal-foreground": alt_fg,  # Don't touch
        "foreground": fg,
        "normal-foreground": fg,
        "alternate-normal-background": bg,
        "red": "rgba ( 220, 50, 47, 100 % )",
        "selected-urgent-foreground": fg,
        "blue": "rgba ( 38, 139, 210, 100 % )",
        "urgent-foreground": fg,
        "alternate-urgent-background": bg,
        "active-foreground": alt_fg,
        "lightbg": bg,
        "selected-active-foreground": fg,
        "alternate-active-background": bg,
        "background": bg,
        "alternate-normal-foreground": fg,
        "normal-background": bg,
        "lightfg": fg,
        "selected-normal-background": alt_bg,  # Don't touch
        "border-color": bg,
        "spacing": "5",
        "separatorcolor": fg,
        "urgent-background": bg,
        "selected-urgent-background": bg,
        "alternate-urgent-foreground": fg,
        "background-color": bg,
        "alternate-active-foreground": fg,
        "active-background": fg,
        "selected-active-background": fg, }

    ks = list(assocs.keys())
    k1 = ks.pop()
    v1 = assocs[k1]
    replace_string = "*{\n" + "    {}: {}".format(k1, v1)

    for i in ks:
        v = assocs[i]
        replace_string = '{};\n    {}: {}'.format(replace_string, i, v)

    replace_string = '{};'.format(replace_string) + '\n}\n'

    lines: list = []
    with open(read_from) as f:
        lines = f.read()
        _, lines = lines.split('/* THEME_MODIFICATION_ENDS_HERE */')

    lines = replace_string + '/* THEME_MODIFICATION_ENDS_HERE */' + lines

    with open(write_to, 'w') as f:
        f.write(lines)

    return lines


class ParseCommandline:
    @staticmethod
    def parse(description):
        """Multiple args can be passed to a parameter as long as they are separated by a comma (or something that you like)"""
        parser = argparse.ArgumentParser(description)
        aa = parser.add_argument

        # With args
        aa('-a', '--bg-normal',
           metavar="#[0-9a-fA-F]",
           required=True,
           action="store",
           help="Normal background color.")

        aa('-b', '--fg-normal',
           metavar="#[0-9a-fA-F]",
           required=True,
           action="store",
           help="Normal foreground color")

        aa('-c', '--bg-selected',
           metavar="#[0-9a-fA-F]",
           required=True,
           action="store",
           help="Selected background color")

        # Without arguments
        aa('-d', '--fg-selected',
           required=True,
           action="store",
           help="Selected foreground color")

        args = parser.parse_args().__dict__
        # Perform your assertions here
        # Valid hex?
        for v in args.values():
            assert(re.search("#[0-9a-fA-F]{6}", v))

        return args


def main():
    cmd_args = ParseCommandline.parse("Set rofi colors")
    bg, fg, alt_bg, alt_fg = [cmd_args[i] for i in
                              ["bg_normal", "fg_normal", "bg_selected", "fg_selected"]]

    inject(bg, fg, alt_bg, alt_fg)

main()
