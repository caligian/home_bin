import re
import os
import argparse


def inject(bg, fg,  alt_bg, alt_fg, write_to):
    assert os.path.exists(write_to)
    read_from = write_to
    elements: dict = {"background":     bg,
                      "background-alt": alt_bg,
                      "foreground-alt": alt_fg,
                      "foreground":     fg,
                      "primary":        bg,
                      "secondary":      fg,
                      "alert":          "#ff0000"}

    def __replacelines(lines: list, startidx: int):
        # startidx starts from the line after [colors]
        for i in range(startidx, len(lines)):
            line: str = lines[i]
            var: str = re.split("\s+", line, maxsplit=1)[0].lstrip()
            if var in elements:
                lines[i] = f'{var} = "{elements[var]}"'
                del elements[var]

        # add the leftover elements
        if len(elements) > 0:
            for i in elements:
                lines[startidx] = '{}\n{}'.format(
                    f'{i} = "{elements[i]}"', lines[startidx])

    def __findstartidx(lines: list):
        for idx, i in enumerate(lines):
            if "[colors]" in i:
                return idx+1
        return -1

    lines = []
    with open(read_from) as FH:
        lines = FH.read().split('\n')

    startidx = __findstartidx(lines)
    if startidx == -1:
        print(f'[colors] section not found in config: {i}')

    __replacelines(lines, startidx)
    lines = ("\n").join(lines)

    with open(read_from, 'w') as FH:
        FH.write(lines)


class ParseCommandline:
    @staticmethod
    def parse(description):
        """Multiple args can be passed to a parameter as long as they are separated by a comma (or something that you like)"""
        parser = argparse.ArgumentParser(description)
        aa = parser.add_argument

        # With args
        aa('-a', '--bg-normal',
           metavar="#[0-9a-fA-F]",
           required=True,
           action="store",
           help="Normal background color.")

        aa('-b', '--fg-normal',
           metavar="#[0-9a-fA-F]",
           required=True,
           action="store",
           help="Normal foreground color")

        aa('-c', '--bg-selected',
           metavar="#[0-9a-fA-F]",
           required=True,
           action="store",
           help="Selected background color")

        aa('-d', '--fg-selected',
           required=True,
           action="store",
           help="Selected foreground color")

        aa('-f', '--path',
           metavar="PATH",
           required=True,
           action="store",
           help="Path to write the theme.")

        args = parser.parse_args().__dict__
        # Perform your assertions here
        # Valid hex?
        for k, v in args.items():
            if not k == 'path':
                assert(re.search("#[0-9a-fA-F]{6}", v))

        return args


def main():
    cmd_args = ParseCommandline.parse("Set polybar colors")
    bg, fg, alt_bg, alt_fg, path = [cmd_args[i] for i in
                                    ["bg_normal", "fg_normal", "bg_selected", "fg_selected", "path"]]

    inject(bg, fg, alt_bg, alt_fg, path)


main()
