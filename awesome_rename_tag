#!/usr/bin/perl

use strict;
use warnings;

scalar(@ARGV) != 2 && die "Usage: awesome tag operations
\$1 should be one of:  move delete rename add switch
\$2 should be an ARG to be provided to \$1.
";

my ($action, $required_tag) = @ARGV;

my $HOME = $ENV{HOME};

my $get_tags_cmd =<<"EOF";
;
s = awful.screen.focused()
tags = s.tags
f = '$HOME/.config/awesome/current_tags.txt'
fh = io.open(f, 'w')
for i,v in ipairs(tags) do
    fh:write(string.format('%s\\n', v.name))
end
fh:close()

EOF

my $rename_tag_cmd =<<"EOF";
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_RENAMED,")
t.name = ",RENAME_TAG_WITH,"

EOF

my $delete_tag_cmd =<<"EOF";
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_DELETED,")
t:delete()

EOF

my $add_tag_cmd =<<"EOF";
new_tag = ",TAG_TO_BE_ADDED,"
awful.tag.add(new_tag, { volatile=true, name=new_tag, selected=true, gap_single_client=true, layout=awful.layout.suit.tile, screen=awful.screen.focused() })

EOF

my $switch_tag_cmd =<<"EOF";
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_SWITCHED_TO,")
t:view_only()

EOF

my $move_tag_cmd =<<"EOF";
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_MOVED_TO,")
c = client.focus
if c then
    c:move_to_tag(t)
end

EOF

my $swap_tag_cmd =<<"EOF";
s = awful.screen.focused()
t1 = awful.tag.find_by_name(s, ",TAG1,")
t2 = awful.tag.find_by_name(s, ",TAG2,")
t1.swap(t2)
EOF

my %message  = ("switch"   => "Switch to tag named?",
                "move"     => "Move to tag named?",
                "swap"     => "Swap: Tag1?",
                "delete"   => "Delete tag named?",
                "add"      => "Add tag named?",
                "rename"   => "Rename tag named?",);

my %assoc = (
	"swap"      => sub { my ($tag1, $tag2) = @_; return $swap_tag_cmd =~ s/,TAG1,/$tag1/r =~ s/,TAG2,/$tag2/r },
    "switch"	=> sub { my $replace = $_[0]; return $switch_tag_cmd =~ s/,TAG_TO_BE_SWITCHED_TO,/$replace/r;},
    "move"		=> sub { my $replace = $_[0];  return $move_tag_cmd =~ s/,TAG_TO_BE_MOVED_TO,/$replace/r },
    "delete"	=> sub { my $replace = $_[0];  return $delete_tag_cmd =~ s/,TAG_TO_BE_DELETED,/$replace/r; },
    "add"		=> sub { my $replace = $_[0];  return $add_tag_cmd =~ s/,TAG_TO_BE_ADDED,/$replace/r },
    "rename"	=> sub { my ($replace, $with) = @_;  return $rename_tag_cmd =~ s/,TAG_TO_BE_RENAMED,/$replace/r =~ s/,RENAME_TAG_WITH,/$with/r },
);


sub get_all_tags {
    my $loc = "$HOME/.config/awesome/current_tags.txt";

    # get the tags
    my $cmd = qq(awesome-client "$get_tags_cmd");
    qx($cmd);

    # read the file and get the tags. Slurp the file into an array and rstrip it.
    open(my $FH, "<", $loc);
    my @tags = <$FH>;
    chomp @tags;
    close($FH);

    return \@tags;
}

sub dispatch {
    my ($action, $args) = @_;
    if (defined($assoc{$action})) {
        my $cmdstr = $assoc{$action}->(@$args);
        $cmdstr = qq(awesome-client '$cmdstr');
        qx($cmdstr);
        print($cmdstr);
    } else {
        die("Invalid action: $action");
    }
}

sub rofi { 
    my $action = shift;     
    my $roficmd = "rofi -dmenu -i -location 0  -width 50";
    my %check = ( "move" => 1, "delete" => 1, "switch" => 1, "rename" => 1, "add" => 0, "swap" => 1);

    if ($check{$action}) {
        my $mesg  = $message{$action};
        my $tags  = get_all_tags();
        my $ntags = scalar(@$tags);
        my @tags_a = @$tags;   
        $tags     = join("\n", @$tags);
        $tags = "echo '$tags' | $roficmd -lines $ntags -mesg '$mesg'";
        my $required_tag_obtained = length($required_tag) == 0 ? qx($tags) : $required_tag; 

        if ($required_tag_obtained) {
            chomp $required_tag_obtained; 

            # Custom command stuff here. 
            #
            # Swapping with 2 args
            if ($action eq "rename") {
                my $rename_to = qx($roficmd -lines 0 -mesg "Rename to?" );
                chomp $rename_to;
                dispatch("rename", [$required_tag_obtained, $rename_to]) if $rename_to;
            }

            # Swapping with two args
            elsif ($action eq "swap") {
                if ($action eq "swap") {
                    my $tag2 = join("\n", @tags_a);
                    my $tag2 = "echo '$tag2' | $roficmd -lines $ntags -mesg 'Swap with?'";
                    qx($tag2);
                    chomp $tag2;
                    if ($required_tag_obtained and $tag2) {
                        dispatch("swap", [$required_tag_obtained, $tag2]);
                    }
                }
            }

            # Normal tags
            else {
                dispatch($action, [$required_tag_obtained]);
            }
        }
    } elsif ($action eq "add") {
        my $required_tag_obtained = qx($roficmd -lines 0 -mesg "Add a new tag named?");
        chomp $required_tag_obtained; 
        dispatch($action, [$required_tag_obtained]) if $required_tag_obtained;
    } else {
        die "Invalid action provided."
    }
}

rofi($action) if $action;
