#!/usr/bin/ruby

require 'byebug'

HELP =<<EOF
Usage: Common operations on awesome tags
$1 Name of command: Any from [add switch move rename delete]
$2...$N Pre_args  : ARGS to be substituted by default

Caveats:
2 args: rename
1 arg : add, switch, move, delete
EOF

if ARGV.length < 2
  puts HELP
  exit
end

ACTION, PRE_ARGS = ARGV[0], ARGV[1..].select { |s| s.length > 0 }

CODE = {}

CODE[:tags] =<<EOF
s = awful.screen.focused()
tags = s.tags
f = '#{ENV['HOME']}/.config/awesome/current_tags.txt'
fh = io.open(f, 'w')
for i,v in ipairs(tags) do
    fh:write(string.format('%s\\n', v.name))
end
fh:close()

EOF

CODE[:rename] =<<EOF
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_RENAMED,")
t.name = ",RENAME_TAG_WITH,"

EOF

CODE[:delete] =<<EOF
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_DELETED,")
t:delete()

EOF

CODE[:add] =<<EOF
new_tag = ",TAG_TO_BE_ADDED,"
awful.tag.add(new_tag, { volatile=true, name=new_tag, selected=true, gap_single_client=true, layout=awful.layout.suit.tile, screen=awful.screen.focused() })

EOF

CODE[:switch] =<<EOF
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_SWITCHED_TO,")
t:view_only()

EOF

CODE[:move] =<<EOF
s = awful.screen.focused()
t = awful.tag.find_by_name(s, ",TAG_TO_BE_MOVED_TO,")
c = client.focus
if c then
    c:move_to_tag(t)
end

EOF

def evalCode(code, pipe_into=false)
  IO.popen(pipe_into, 'w') { |fh|
    fh.write(code)
  }
end

def getTags()
  evalCode(CODE[:tags], pipe_into='awesome-client')
  File.open(ENV['HOME'] + '/.config/awesome/current_tags.txt') do |fh|
    fh.read.chomp.split("\n")
  end
end


def doAction(name, tags, sub_sa, code, mesgs)
  pre_args = PRE_ARGS.select { |i| not i.to_s.empty? }
  pre_args.length > mesgs.length and raise Exception("Excess parameters passed for action: #{name}.\nRequired: #{mesgs.length}")

  get_tags_by_rofi = ->(_tags) {
    loop_times = mesgs.length

    if pre_args.length == loop_times
      return pre_args
    else
      loop_times -= pre_args.length
    end

    _tags_s = _tags.join("\n")
    _tags_s = %Q(echo '#{_tags_s}');
    _tags_a = []

    (pre_args.length ... loop_times).each do |i|
      cmd = %(#{_tags_s} | rofi -dmenu -i -location 0 -width 50 -mesg '#{mesgs[i]}')
      tag = %x(#{cmd}).chomp
      _tags_a.push(tag)
    end

    pre_args.concat(_tags_a)
  }

  replace_code_with_tags = ->(replacement_tags) {
    sub_sa.each_with_index do |sub, idx|
      tag = replacement_tags[idx].chomp
      code = code.sub(sub, tag)
    end
    code
  }

  eval_code = ->(code) {
    code = code.split("\n").join(';')
    evalCode(code, pipe_into='awesome-client')
  }

  tags = get_tags_by_rofi.call(tags)
  code = replace_code_with_tags.call(tags)
  out = eval_code.call(code)
end

TAGS = getTags()

case ACTION
when 'delete'
  doAction("delete",
           TAGS,
           [",TAG_TO_BE_DELETED,"],
           CODE[:delete],
           ["Delete Tag? "],)

when 'rename'
  doAction("rename",
           TAGS,
           [",TAG_TO_BE_RENAMED,", ",RENAME_TAG_WITH," ],
           CODE[:rename],
           ["Rename Tag?", "With?"],)

when 'add'
  doAction("add",
           TAGS,
           [",TAG_TO_BE_ADDED,"],
           CODE[:add],
           ["Add Tag named?"],)

when 'move'
  doAction("move",
           TAGS,
           [",TAG_TO_BE_MOVED_TO,"],
           CODE[:move],
           ["Move focused client to tag named?"],)

when 'switch'
  doAction("switch",
           TAGS,
           [",TAG_TO_BE_SWITCHED_TO,"],
           CODE[:switch],
           ["Switch to Tag?"],)
end
